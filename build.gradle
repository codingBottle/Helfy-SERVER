plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.codingbottle'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.codingbottle'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        finalizedBy 'jacocoTestCoverageVerification'

        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [] + Qdomains)
            }))
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'


                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0
                }

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.0
                }

                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0
                }

                excludes = [
                        '**/*Application*',
                        '**/*dto*',
                        '**/*Response*',
                        '**/*Requset*',
                        '**/*config*',
                        '**/*ErrorCode*',
                        "*Q*",
                ]
            }

            rule {
                element = 'METHOD'

                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 200
                }
            }
        }
    }
}

subprojects { subproject ->
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'application'
    apply plugin: 'distribution'
    apply plugin: 'org.springframework.boot'

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        implementation  'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation group: 'com.google.firebase', name: 'firebase-admin', version: '8.0.1'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'com.github.napstr:logback-discord-appender:1.0.0'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        runtimeOnly 'com.mysql:mysql-connector-j'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    plugins.withType(JavaPlugin).tap {
        configureEach {
            java {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
            }

            compileJava {
                options.encoding = 'UTF-8'
            }

            idea {
                module {
                    outputDir = file("$buildDir/classes/main/")
                    testOutputDir = file("$buildDir/classes/test/")
                }
            }
        }
    }
}

tasks.register('jacocoRootReport', JacocoReport) {
    additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(subprojects.sourceSets.main.output)
    executionData.from fileTree(project.rootDir.absolutePath).include("**/build/jacoco/test.exec")

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.html")
    }

    doLast {
        subprojects.each { subproject ->
            delete subproject.buildDir.path + "/reports/jacoco"
        }
    }
}

